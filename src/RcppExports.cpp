// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// weighted_cov
arma::mat weighted_cov(const arma::mat& x, const arma::vec& w);
RcppExport SEXP _independentsubclustering_weighted_cov(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_cov(x, w));
    return rcpp_result_gen;
END_RCPP
}
// weighted_reg_beta
arma::mat weighted_reg_beta(const arma::mat& X, const arma::vec& wt, const arma::mat& Y);
RcppExport SEXP _independentsubclustering_weighted_reg_beta(SEXP XSEXP, SEXP wtSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_reg_beta(X, wt, Y));
    return rcpp_result_gen;
END_RCPP
}
// arma_direct2
arma::mat arma_direct2(const arma::mat& X, const arma::vec& w, const arma::mat& y);
RcppExport SEXP _independentsubclustering_arma_direct2(SEXP XSEXP, SEXP wSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(arma_direct2(X, w, y));
    return rcpp_result_gen;
END_RCPP
}
// update_bars_sigma_inv
arma::cube update_bars_sigma_inv(const unsigned int G, const arma::uvec& setx, const arma::uvec& sety, const arma::cube& Sg, const arma::cube& Sgh, const arma::cube& B, const arma::vec& psi, const unsigned int px, const unsigned int py, const unsigned int p);
RcppExport SEXP _independentsubclustering_update_bars_sigma_inv(SEXP GSEXP, SEXP setxSEXP, SEXP setySEXP, SEXP SgSEXP, SEXP SghSEXP, SEXP BSEXP, SEXP psiSEXP, SEXP pxSEXP, SEXP pySEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type setx(setxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sety(setySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sg(SgSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sgh(SghSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type py(pySEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_bars_sigma_inv(G, setx, sety, Sg, Sgh, B, psi, px, py, p));
    return rcpp_result_gen;
END_RCPP
}
// m_step_gamma
arma::mat m_step_gamma(const unsigned int G, Rcpp::List& sigma_bar_g_h_inv, Rcpp::List& mu_bar_g_h, const arma::mat& wt, const arma::mat& data, const arma::mat& Gamma, const unsigned int max_update, const double epsilon);
RcppExport SEXP _independentsubclustering_m_step_gamma(SEXP GSEXP, SEXP sigma_bar_g_h_invSEXP, SEXP mu_bar_g_hSEXP, SEXP wtSEXP, SEXP dataSEXP, SEXP GammaSEXP, SEXP max_updateSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_bar_g_h_inv(sigma_bar_g_h_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type mu_bar_g_h(mu_bar_g_hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_update(max_updateSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(m_step_gamma(G, sigma_bar_g_h_inv, mu_bar_g_h, wt, data, Gamma, max_update, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// m_step_gamma_tr
arma::mat m_step_gamma_tr(const unsigned int G, Rcpp::List& sigma_bar_g_h_inv, Rcpp::List& mu_bar_g_h, const arma::mat& wt, const arma::mat& data, const arma::mat& Gamma, const unsigned int max_update, const double epsilon);
RcppExport SEXP _independentsubclustering_m_step_gamma_tr(SEXP GSEXP, SEXP sigma_bar_g_h_invSEXP, SEXP mu_bar_g_hSEXP, SEXP wtSEXP, SEXP dataSEXP, SEXP GammaSEXP, SEXP max_updateSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_bar_g_h_inv(sigma_bar_g_h_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type mu_bar_g_h(mu_bar_g_hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_update(max_updateSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(m_step_gamma_tr(G, sigma_bar_g_h_inv, mu_bar_g_h, wt, data, Gamma, max_update, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// m_step_gamma_dual
arma::mat m_step_gamma_dual(const unsigned int G, Rcpp::List& sigma_bar_g_h_inv, Rcpp::List& mu_bar_g_h, const arma::mat& wt, const arma::mat& data, const arma::mat& Gamma, const unsigned int max_update, const double epsilon);
RcppExport SEXP _independentsubclustering_m_step_gamma_dual(SEXP GSEXP, SEXP sigma_bar_g_h_invSEXP, SEXP mu_bar_g_hSEXP, SEXP wtSEXP, SEXP dataSEXP, SEXP GammaSEXP, SEXP max_updateSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_bar_g_h_inv(sigma_bar_g_h_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type mu_bar_g_h(mu_bar_g_hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_update(max_updateSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(m_step_gamma_dual(G, sigma_bar_g_h_inv, mu_bar_g_h, wt, data, Gamma, max_update, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// mixlogden_helper
arma::mat mixlogden_helper(const unsigned int px, const unsigned int py, const unsigned int G, Rcpp::List& sigma_bar_g_h_inv, Rcpp::List& mu_bar_g_h, arma::vec& tau_g_h, arma::mat& rotX, arma::mat& rotY);
RcppExport SEXP _independentsubclustering_mixlogden_helper(SEXP pxSEXP, SEXP pySEXP, SEXP GSEXP, SEXP sigma_bar_g_h_invSEXP, SEXP mu_bar_g_hSEXP, SEXP tau_g_hSEXP, SEXP rotXSEXP, SEXP rotYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type py(pySEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_bar_g_h_inv(sigma_bar_g_h_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type mu_bar_g_h(mu_bar_g_hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_g_h(tau_g_hSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotX(rotXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotY(rotYSEXP);
    rcpp_result_gen = Rcpp::wrap(mixlogden_helper(px, py, G, sigma_bar_g_h_inv, mu_bar_g_h, tau_g_h, rotX, rotY));
    return rcpp_result_gen;
END_RCPP
}
// logden_helper
arma::mat logden_helper(const unsigned int G, Rcpp::List& sigma_bar_g_h_inv, Rcpp::List& mu_bar_g_h, arma::vec& tau_g_h, arma::mat& rotX, arma::mat& rotY, arma::mat& rotZ, const arma::mat& data);
RcppExport SEXP _independentsubclustering_logden_helper(SEXP GSEXP, SEXP sigma_bar_g_h_invSEXP, SEXP mu_bar_g_hSEXP, SEXP tau_g_hSEXP, SEXP rotXSEXP, SEXP rotYSEXP, SEXP rotZSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_bar_g_h_inv(sigma_bar_g_h_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type mu_bar_g_h(mu_bar_g_hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_g_h(tau_g_hSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotX(rotXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotY(rotYSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotZ(rotZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(logden_helper(G, sigma_bar_g_h_inv, mu_bar_g_h, tau_g_h, rotX, rotY, rotZ, data));
    return rcpp_result_gen;
END_RCPP
}
// logden_wts
arma::mat logden_wts(arma::mat& z);
RcppExport SEXP _independentsubclustering_logden_wts(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(logden_wts(z));
    return rcpp_result_gen;
END_RCPP
}
// logden_loglik
arma::vec logden_loglik(arma::mat& z);
RcppExport SEXP _independentsubclustering_logden_loglik(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(logden_loglik(z));
    return rcpp_result_gen;
END_RCPP
}
// m_step_primary
Rcpp::List m_step_primary(const arma::mat& z_ngh, const arma::uvec& setx, const unsigned int Gx, const arma::mat& X, const bool diagonal);
RcppExport SEXP _independentsubclustering_m_step_primary(SEXP z_nghSEXP, SEXP setxSEXP, SEXP GxSEXP, SEXP XSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type z_ngh(z_nghSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type setx(setxSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Gx(GxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(m_step_primary(z_ngh, setx, Gx, X, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// m_step_secondary
Rcpp::List m_step_secondary(const arma::mat& z_ngh, const arma::uvec& sety, const arma::uvec& Gy, const arma::mat& X, const arma::mat& Y, const bool regression, const bool subcluster, const bool diagonal);
RcppExport SEXP _independentsubclustering_m_step_secondary(SEXP z_nghSEXP, SEXP setySEXP, SEXP GySEXP, SEXP XSEXP, SEXP YSEXP, SEXP regressionSEXP, SEXP subclusterSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type z_ngh(z_nghSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sety(setySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool >::type regression(regressionSEXP);
    Rcpp::traits::input_parameter< const bool >::type subcluster(subclusterSEXP);
    Rcpp::traits::input_parameter< const bool >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(m_step_secondary(z_ngh, sety, Gy, X, Y, regression, subcluster, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// e_step_helper
arma::mat e_step_helper(const unsigned int px, const unsigned int py, const unsigned int G, Rcpp::List& sigma_bar_g_h_inv, Rcpp::List& mu_bar_g_h, arma::vec& tau_g_h, arma::mat& rotX, arma::mat& rotY);
RcppExport SEXP _independentsubclustering_e_step_helper(SEXP pxSEXP, SEXP pySEXP, SEXP GSEXP, SEXP sigma_bar_g_h_invSEXP, SEXP mu_bar_g_hSEXP, SEXP tau_g_hSEXP, SEXP rotXSEXP, SEXP rotYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type py(pySEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_bar_g_h_inv(sigma_bar_g_h_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type mu_bar_g_h(mu_bar_g_hSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau_g_h(tau_g_hSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotX(rotXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rotY(rotYSEXP);
    rcpp_result_gen = Rcpp::wrap(e_step_helper(px, py, G, sigma_bar_g_h_inv, mu_bar_g_h, tau_g_h, rotX, rotY));
    return rcpp_result_gen;
END_RCPP
}
// continue_em
Rcpp::List continue_em(Rcpp::List state, const unsigned int niter, const bool hold_z, const bool progress, const bool loglik, const bool diagonal, const unsigned int gamma_updates, const double gamma_epsilon, const double loglik_eps);
RcppExport SEXP _independentsubclustering_continue_em(SEXP stateSEXP, SEXP niterSEXP, SEXP hold_zSEXP, SEXP progressSEXP, SEXP loglikSEXP, SEXP diagonalSEXP, SEXP gamma_updatesSEXP, SEXP gamma_epsilonSEXP, SEXP loglik_epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const bool >::type hold_z(hold_zSEXP);
    Rcpp::traits::input_parameter< const bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const bool >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< const bool >::type diagonal(diagonalSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type gamma_updates(gamma_updatesSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma_epsilon(gamma_epsilonSEXP);
    Rcpp::traits::input_parameter< const double >::type loglik_eps(loglik_epsSEXP);
    rcpp_result_gen = Rcpp::wrap(continue_em(state, niter, hold_z, progress, loglik, diagonal, gamma_updates, gamma_epsilon, loglik_eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_independentsubclustering_weighted_cov", (DL_FUNC) &_independentsubclustering_weighted_cov, 2},
    {"_independentsubclustering_weighted_reg_beta", (DL_FUNC) &_independentsubclustering_weighted_reg_beta, 3},
    {"_independentsubclustering_arma_direct2", (DL_FUNC) &_independentsubclustering_arma_direct2, 3},
    {"_independentsubclustering_update_bars_sigma_inv", (DL_FUNC) &_independentsubclustering_update_bars_sigma_inv, 10},
    {"_independentsubclustering_m_step_gamma", (DL_FUNC) &_independentsubclustering_m_step_gamma, 8},
    {"_independentsubclustering_m_step_gamma_tr", (DL_FUNC) &_independentsubclustering_m_step_gamma_tr, 8},
    {"_independentsubclustering_m_step_gamma_dual", (DL_FUNC) &_independentsubclustering_m_step_gamma_dual, 8},
    {"_independentsubclustering_mixlogden_helper", (DL_FUNC) &_independentsubclustering_mixlogden_helper, 8},
    {"_independentsubclustering_logden_helper", (DL_FUNC) &_independentsubclustering_logden_helper, 8},
    {"_independentsubclustering_logden_wts", (DL_FUNC) &_independentsubclustering_logden_wts, 1},
    {"_independentsubclustering_logden_loglik", (DL_FUNC) &_independentsubclustering_logden_loglik, 1},
    {"_independentsubclustering_m_step_primary", (DL_FUNC) &_independentsubclustering_m_step_primary, 5},
    {"_independentsubclustering_m_step_secondary", (DL_FUNC) &_independentsubclustering_m_step_secondary, 8},
    {"_independentsubclustering_e_step_helper", (DL_FUNC) &_independentsubclustering_e_step_helper, 8},
    {"_independentsubclustering_continue_em", (DL_FUNC) &_independentsubclustering_continue_em, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_independentsubclustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
